/*
Bike-Share Data Exploration, Processing, and Analysis
Skills used: Temp Tables, CASE Statements, Sub-Queries,  Unions, Aggregate Functions, Creating Tables, Creating Views, Converting Data Types
*/

-- Business Task: Explore differences between casual memebers and annual members of a bike-sharing company over the past 12 months.
-- Business Goal: Design a marketing campain targeting casual riders to increase annual memberships.
-------------------------------------------------------------------------------------------------------------------------------------



-- I first exported the data into excel to take a look and to understand the content and structure of the data.
-- For our business task, I decided to leave behind the start_long, start_lat, end_lon, and end_lat columns, which have to do with
-- the geographical coordinates of bike docking stations because they are irrelevant to the busienss task.

------------------------------------------------------------------------------------------
-- I began by merging the monthly ride data into a single table to be able to spot seasonality.
-- I wrote a query that aggregates all data with no NULL values into a new table. 
-- This allowed me preserve the raw data in its orginial form, create my new table, and produce clean data for analysis in one step.


CREATE TABLE `case-study-space.cyclist_ridership.annual_trips_clean`
AS
SELECT ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, member_casual

FROM(
SELECT ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, member_casual
from `case-study-space.cyclist_ridership.2021_01_trips.`

UNION ALL 
SELECT ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, member_casual
from `case-study-space.cyclist_ridership.2021_02_trips.`

UNION ALL 
SELECT ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, member_casual
from `case-study-space.cyclist_ridership.2021_03_trips.`

UNION ALL 
SELECT ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, member_casual
from `case-study-space.cyclist_ridership.2021_04_trips.`

UNION ALL 
SELECT ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, member_casual
from `case-study-space.cyclist_ridership.2021_05_trips.`

UNION ALL 
SELECT ride_id,rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, member_casual
from `case-study-space.cyclist_ridership.2021_06_trips.`

UNION ALL 
SELECT ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, member_casual
from `case-study-space.cyclist_ridership.2021_07_trips.`

UNION ALL 
SELECT ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, member_casual
from `case-study-space.cyclist_ridership.2021_08_trips.`

UNION ALL 
SELECT ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, member_casual
from `case-study-space.cyclist_ridership.2021_09_trips.`

UNION ALL 
SELECT ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, member_casual
from `case-study-space.cyclist_ridership.2021_10_trips.`

UNION ALL 
SELECT ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, member_casual
from `case-study-space.cyclist_ridership.2021_11.`

UNION ALL 
SELECT ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, member_casual
from `case-study-space.cyclist_ridership.2021_12_trips.`
)

WHERE 
ride_id IS NOT NULL 
AND rideable_type IS NOT NULL
AND started_at IS NOT NULL 
AND ended_at IS NOT NULL 
AND start_station_name IS NOT NULL 
AND start_station_id IS NOT NULL 
AND end_station_name IS NOT NULL
AND end_station_id IS NOT NULL 
AND member_casual IS NOT NULL

-------------------------------------------------------------------------------
-- In the previous query,I used UNION ALL to allow duplicate values which exist in the data start_station_name to exist in the new table. 
-- Some columns however, e.x. ride_id --should not have any duplicates. To inspect this, I ran the following query.

SELECT 
    DISTINCT COUNT (ride_id),
    COUNT (ride_id)
FROM
    `case-study-space.cyclist_ridership.annual_trips_clean`

 
------------------------------------------------------------------------------------
-- Now that the data is clean and ready for analysis, I could examine the different ways riders can differ in their utilization of the service. 
-- Knowing that the company offers multiple bike types, I decided to start there. 
-- The purpose of the  next query is to group the bike type 'rideable_type' and the membership status 'member_casual' to spot any trends.
-- I used a case statement to calculate what percentage each readable_type and member_casual represent out of the large members and casual groups.

SELECT 
    rideable_type,
    COUNT (rideable_type) AS count,
    member_casual AS membership_status,
    
    CASE WHEN (member_casual = "casual") THEN (ROUND((count(rideable_type) / (select count(member_casual)
                            from `case-study-space.cyclist_ridership.annual_trips_clean`
                            where member_casual = "casual") *100) ,2) )
    
   
   ELSE (ROUND(( count(rideable_type) / (select count(member_casual)
                            from `case-study-space.cyclist_ridership.annual_trips_clean`
                            where member_casual = "member") * 100 ), 2) ) END AS percentage

FROM `case-study-space.cyclist_ridership.annual_trips_clean`
GROUP BY 
    rideable_type, member_casual
ORDER BY count DESC

------------------------------------------------------------------------------------

-- Another angle I decided to examine is seasnality, I wanted to write a query that highlight rank the number of member and casual riders each month.
-- The DATE variable, listed in the started_at and ended_at columns are DATETIME format, so I wrote a query to extract the month element to group the results.

SELECT 
count(ride_id) AS num_of_rides,
member_casual AS membership_status,
EXTRACT(MONTH FROM ended_at) AS month,
Round((count(ride_id) / ( select count(ride_id) FROM`case-study-space.cyclist_ridership.annual_trips_clean` )) * 100,2) AS percentage_of_total_rides,


FROM `case-study-space.cyclist_ridership.annual_trips_clean`
group by member_casual, month
order by percentage_of_total_rides DESC


------------------------------------------------------------------------------------

-- Another angle I considered is the location. I wrote a query to examine if casual riders habitually use different locations from the member riders.

SELECT 
    start_station_name,
    count(start_station_name) AS num_of_rides,
    member_casual
from`case-study-space.cyclist_ridership.annual_trips_clean`
Group by start_station_name, member_casual
order by num_of_rides DESC


------------------------------------------------------------------------------------

-- Next, I decided to query the most popular locations for casual riders. This is valueable information as these locations would be the prime targets for 
-- our marketing campaign.

SELECT 
    start_station_name,
    count(start_station_name) AS num_of_rides,
    member_casual
from`case-study-space.cyclist_ridership.annual_trips_clean`
WHERE member_casual = "casual"
Group by start_station_name, member_casual
order by num_of_rides DESC

------------------------------------------------------------------------------------

-- Lastly, I decided to look into the time variable, I want to include this information in my vizualization.
-- I decided to create a temporary table with some predefined variables. This allows me to get the data I want without too much clutter.
-- Since the data is in DATETIME format, I decided it would be best to calculate the time difference first before extracting the time component,
-- this way I don't have to worry about rides that start in one day and end in the next. I then used SUBSTR() to extract the portion I will 
-- use for my vizualization.

WITH ride_log AS (
SELECT  
  rideable_type,
  member_casual,
  EXTRACT(TIME FROM started_at) AS start_time,
  EXTRACT(TIME FROM ended_at) AS end_time,
  ended_at - started_at AS ride_len_raw,
  

  

FROM 
  `case-study-space.cyclist_ridership.annual_trips_clean`
  ) 

SELECT member_casual, 
SUBSTR((CAST(ride_len_raw AS STRING)), 6) AS ride_length, 
ride_len_raw
        
FROM ride_log

ORDER BY ride_length DESC

----------------------------------------
-- Next, I queried the average ride_length for each bike type for casual and annual members

SELECT rideable_type, member_casual, AVG(ride_len_raw) AS average_ride_length
        
FROM ride_log
GROUP BY member_casual, rideable_type




-- Now that I have some strng insights, I downloaded the results of my queries to build out my vizualizations.
